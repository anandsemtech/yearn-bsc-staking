import {
  AppKitAccountButton,
  AppKitButton,
  AppKitConnectButton,
  AppKitNetworkButton
} from "./chunk-RSVYAXR7.js";
import "./chunk-LPF67KBI.js";
import "./chunk-E27ZDFK5.js";
import "./chunk-52AB5G5N.js";
import "./chunk-GIDM3PUK.js";
import "./chunk-NICIT747.js";
import "./chunk-NJBVQK2W.js";
import "./chunk-7QSFY3EF.js";
import "./chunk-HNB35IZC.js";
import "./chunk-XG23SLXO.js";
import "./chunk-ACEODZJB.js";
import "./chunk-2J3QYTQA.js";
import "./chunk-T6SZG6AO.js";
import "./chunk-DV54DU7C.js";
import "./chunk-LXCNDGQI.js";
import "./chunk-LDNPU26R.js";
import "./chunk-JIBTRDZK.js";
import "./chunk-5CZQDXI6.js";
import "./chunk-PHTLCYSE.js";
import "./chunk-6QOWD2HI.js";
import "./chunk-2SFK7WGY.js";
import "./chunk-SMU2KUKD.js";
import "./chunk-AVL2HLUA.js";
import "./chunk-TI7FWOOO.js";
import "./chunk-CZNKIOJG.js";
import "./chunk-LD4QFRZW.js";
import "./chunk-732VSJME.js";
import "./chunk-WU72ENWV.js";
import "./chunk-FS3CSUOV.js";
import "./chunk-RAQGKJFC.js";
import "./chunk-RHCYEYXI.js";
import "./chunk-KYELQMPF.js";
import "./chunk-CGXHVTOC.js";
import "./chunk-N4OAJHNV.js";
import "./chunk-UJ5QLE4W.js";
import "./chunk-CR243GVO.js";
import "./chunk-DNGJRDZZ.js";
import "./chunk-YPI77PKV.js";
import "./chunk-22L3BMLB.js";
import {
  AppKit,
  DEFAULT_METHODS,
  PACKAGE_VERSION,
  WcConstantsUtil,
  WcHelpersUtil
} from "./chunk-J5KU3VFI.js";
import "./chunk-ZCQJO3MT.js";
import "./chunk-627XIL5L.js";
import "./chunk-ODAPH2P5.js";
import "./chunk-WKZPPMDW.js";
import "./chunk-MZXFFUKN.js";
import {
  AlertController,
  ProviderController
} from "./chunk-QQ7MWM6W.js";
import "./chunk-GJ7526E2.js";
import "./chunk-EGEXBN4Y.js";
import "./chunk-NPY75PGV.js";
import "./chunk-AL7AZVTW.js";
import "./chunk-ANJCMEYS.js";
import "./chunk-ZUU2CABP.js";
import {
  AssetController,
  AssetUtil,
  ChainController,
  ConnectionController,
  ConnectionControllerUtil,
  ConnectorController,
  CoreHelperUtil,
  OptionsController,
  StorageUtil,
  useSnapshot
} from "./chunk-VFMCAHC6.js";
import "./chunk-FUV7PBD3.js";
import "./chunk-MTYHTLTY.js";
import "./chunk-JUZRGIBO.js";
import "./chunk-AIKI3U3O.js";
import "./chunk-KASMAJTU.js";
import "./chunk-OMHDK36G.js";
import "./chunk-6GOASCKB.js";
import "./chunk-YZ6HGUZJ.js";
import "./chunk-XN5NBNGY.js";
import {
  ConstantsUtil
} from "./chunk-67X3YCHG.js";
import "./chunk-LQHVTAS5.js";
import "./chunk-7NPBFR3D.js";
import "./chunk-2Z4N4JVP.js";
import "./chunk-PYTMSYRP.js";
import "./chunk-2M2WFVXO.js";
import {
  require_react
} from "./chunk-VT65UQWK.js";
import {
  __toESM
} from "./chunk-ONY6HBPH.js";

// node_modules/@reown/appkit-controllers/dist/esm/exports/react.js
var import_react = __toESM(require_react());
function useAppKitProvider(chainNamespace) {
  const { providers, providerIds } = useSnapshot(ProviderController.state);
  const walletProvider = providers[chainNamespace];
  const walletProviderType = providerIds[chainNamespace];
  return {
    walletProvider,
    walletProviderType
  };
}
function useAppKitNetworkCore() {
  const { activeCaipNetwork } = useSnapshot(ChainController.state);
  return {
    caipNetwork: activeCaipNetwork,
    chainId: activeCaipNetwork == null ? void 0 : activeCaipNetwork.id,
    caipNetworkId: activeCaipNetwork == null ? void 0 : activeCaipNetwork.caipNetworkId
  };
}
function useAppKitAccount(options) {
  var _a;
  const state = useSnapshot(ChainController.state);
  const { activeConnectorIds } = useSnapshot(ConnectorController.state);
  const chainNamespace = (options == null ? void 0 : options.namespace) || state.activeChain;
  if (!chainNamespace) {
    return {
      allAccounts: [],
      address: void 0,
      caipAddress: void 0,
      status: void 0,
      isConnected: false,
      embeddedWalletInfo: void 0
    };
  }
  const chainAccountState = (_a = state.chains.get(chainNamespace)) == null ? void 0 : _a.accountState;
  const authConnector = ConnectorController.getAuthConnector(chainNamespace);
  const activeConnectorId = activeConnectorIds[chainNamespace];
  const connections = ConnectionController.getConnections(chainNamespace);
  const allAccounts = connections.flatMap((connection) => connection.accounts.map(({ address, type, publicKey }) => CoreHelperUtil.createAccount(chainNamespace, address, type || "eoa", publicKey)));
  return {
    allAccounts,
    caipAddress: chainAccountState == null ? void 0 : chainAccountState.caipAddress,
    address: CoreHelperUtil.getPlainAddress(chainAccountState == null ? void 0 : chainAccountState.caipAddress),
    isConnected: Boolean(chainAccountState == null ? void 0 : chainAccountState.caipAddress),
    status: chainAccountState == null ? void 0 : chainAccountState.status,
    embeddedWalletInfo: authConnector && activeConnectorId === ConstantsUtil.CONNECTOR_ID.AUTH ? {
      user: (chainAccountState == null ? void 0 : chainAccountState.user) ? {
        ...chainAccountState.user,
        /*
         * Getting the username from the chain controller works well for social logins,
         * but Farcaster uses a different connection flow and doesn’t emit the username via events.
         * Since the username is stored in local storage before the chain controller updates,
         * it’s safe to use the local storage value here.
         */
        username: StorageUtil.getConnectedSocialUsername()
      } : void 0,
      authProvider: (chainAccountState == null ? void 0 : chainAccountState.socialProvider) || "email",
      accountType: chainAccountState == null ? void 0 : chainAccountState.preferredAccountType,
      isSmartAccountDeployed: Boolean(chainAccountState == null ? void 0 : chainAccountState.smartAccountDeployed)
    } : void 0
  };
}
function useDisconnect() {
  async function disconnect(props) {
    await ConnectionController.disconnect(props);
  }
  return { disconnect };
}
function useAppKitConnections(namespace) {
  useSnapshot(ConnectionController.state);
  useSnapshot(ConnectorController.state);
  useSnapshot(AssetController.state);
  const { activeChain } = useSnapshot(ChainController.state);
  const { remoteFeatures } = useSnapshot(OptionsController.state);
  const chainNamespace = namespace ?? activeChain;
  const isMultiWalletEnabled = Boolean(remoteFeatures == null ? void 0 : remoteFeatures.multiWallet);
  if (!chainNamespace) {
    throw new Error("No namespace found");
  }
  if (!isMultiWalletEnabled) {
    AlertController.open(ConstantsUtil.REMOTE_FEATURES_ALERTS.MULTI_WALLET_NOT_ENABLED.CONNECTIONS_HOOK, "info");
    return {
      connections: [],
      recentConnections: []
    };
  }
  const { connections, recentConnections } = ConnectionControllerUtil.getConnectionsData(chainNamespace);
  const formatConnection = (0, import_react.useCallback)((connection) => {
    const connector = ConnectorController.getConnectorById(connection.connectorId);
    const name = ConnectorController.getConnectorName(connector == null ? void 0 : connector.name);
    const icon = AssetUtil.getConnectorImage(connector);
    const networkImage = AssetUtil.getNetworkImage(connection.caipNetwork);
    return {
      name,
      icon,
      networkIcon: networkImage,
      ...connection
    };
  }, []);
  return {
    connections: connections.map(formatConnection),
    recentConnections: recentConnections.map(formatConnection)
  };
}
function useAppKitConnection({ namespace, onSuccess, onError }) {
  const { connections, isSwitchingConnection } = useSnapshot(ConnectionController.state);
  const { activeConnectorIds } = useSnapshot(ConnectorController.state);
  const { activeChain } = useSnapshot(ChainController.state);
  const { remoteFeatures } = useSnapshot(OptionsController.state);
  const chainNamespace = namespace ?? activeChain;
  if (!chainNamespace) {
    throw new Error("No namespace found");
  }
  const isMultiWalletEnabled = Boolean(remoteFeatures == null ? void 0 : remoteFeatures.multiWallet);
  if (!isMultiWalletEnabled) {
    AlertController.open(ConstantsUtil.REMOTE_FEATURES_ALERTS.MULTI_WALLET_NOT_ENABLED.CONNECTION_HOOK, "info");
    return {
      connection: void 0,
      isPending: false,
      switchConnection: () => Promise.resolve(void 0),
      deleteConnection: () => ({})
    };
  }
  const connectorId = activeConnectorIds[chainNamespace];
  const connList = connections.get(chainNamespace);
  const connection = connList == null ? void 0 : connList.find((c) => c.connectorId.toLowerCase() === (connectorId == null ? void 0 : connectorId.toLowerCase()));
  const switchConnection = (0, import_react.useCallback)(async ({ connection: _connection, address }) => {
    try {
      ConnectionController.setIsSwitchingConnection(true);
      await ConnectionController.switchConnection({
        connection: _connection,
        address,
        namespace: chainNamespace,
        onChange({ address: newAddress, namespace: newNamespace, hasSwitchedAccount, hasSwitchedWallet }) {
          onSuccess == null ? void 0 : onSuccess({
            address: newAddress,
            namespace: newNamespace,
            hasSwitchedAccount,
            hasSwitchedWallet,
            hasDeletedWallet: false
          });
        }
      });
    } catch (err) {
      const error = err instanceof Error ? err : new Error("Something went wrong");
      onError == null ? void 0 : onError(error);
    } finally {
      ConnectionController.setIsSwitchingConnection(false);
    }
  }, [chainNamespace, onSuccess, onError]);
  const deleteConnection = (0, import_react.useCallback)(({ address, connectorId: connectorId2 }) => {
    StorageUtil.deleteAddressFromConnection({ connectorId: connectorId2, address, namespace: chainNamespace });
    ConnectionController.syncStorageConnections();
    onSuccess == null ? void 0 : onSuccess({
      address,
      namespace: chainNamespace,
      hasSwitchedAccount: false,
      hasSwitchedWallet: false,
      hasDeletedWallet: true
    });
  }, [chainNamespace]);
  return {
    connection,
    isPending: isSwitchingConnection,
    switchConnection,
    deleteConnection
  };
}

// node_modules/@reown/appkit/dist/esm/src/library/react/index.js
var import_react2 = __toESM(require_react(), 1);
var modal = void 0;
function getAppKit(appKit) {
  if (appKit) {
    modal = appKit;
  }
}
function useAppKitTheme() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKitTheme" hook');
  }
  function setThemeMode(themeMode2) {
    if (themeMode2) {
      modal == null ? void 0 : modal.setThemeMode(themeMode2);
    }
  }
  function setThemeVariables(themeVariables2) {
    if (themeVariables2) {
      modal == null ? void 0 : modal.setThemeVariables(themeVariables2);
    }
  }
  const [themeMode, setInternalThemeMode] = (0, import_react2.useState)(modal.getThemeMode());
  const [themeVariables, setInternalThemeVariables] = (0, import_react2.useState)(modal.getThemeVariables());
  (0, import_react2.useEffect)(() => {
    const unsubscribe = modal == null ? void 0 : modal.subscribeTheme((state) => {
      setInternalThemeMode(state.themeMode);
      setInternalThemeVariables(state.themeVariables);
    });
    return () => {
      unsubscribe == null ? void 0 : unsubscribe();
    };
  }, []);
  return {
    themeMode,
    themeVariables,
    setThemeMode,
    setThemeVariables
  };
}
function useAppKit() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKit" hook');
  }
  async function open(options) {
    return modal == null ? void 0 : modal.open(options);
  }
  async function close() {
    await (modal == null ? void 0 : modal.close());
  }
  return { open, close };
}
function useWalletInfo(namespace) {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useWalletInfo" hook');
  }
  const [walletInfo, setWalletInfo] = (0, import_react2.useState)(() => modal == null ? void 0 : modal.getWalletInfo(namespace));
  (0, import_react2.useEffect)(() => {
    setWalletInfo(modal == null ? void 0 : modal.getWalletInfo(namespace));
    const unsubscribe = modal == null ? void 0 : modal.subscribeWalletInfo((newWalletInfo) => {
      setWalletInfo(newWalletInfo);
    }, namespace);
    return () => unsubscribe == null ? void 0 : unsubscribe();
  }, [namespace]);
  return { walletInfo };
}
function useAppKitState() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKitState" hook');
  }
  const [state, setState] = (0, import_react2.useState)({ ...modal.getState(), initialized: false });
  const [remoteFeatures, setRemoteFeatures] = (0, import_react2.useState)(modal.getRemoteFeatures());
  (0, import_react2.useEffect)(() => {
    if (modal) {
      setState({ ...modal.getState() });
      setRemoteFeatures(modal.getRemoteFeatures());
      const unsubscribe = modal == null ? void 0 : modal.subscribeState((newState) => {
        setState({ ...newState });
      });
      const unsubscribeRemoteFeatures = modal == null ? void 0 : modal.subscribeRemoteFeatures((newState) => {
        setRemoteFeatures(newState);
      });
      return () => {
        unsubscribe == null ? void 0 : unsubscribe();
        unsubscribeRemoteFeatures == null ? void 0 : unsubscribeRemoteFeatures();
      };
    }
    return () => null;
  }, []);
  return { ...state, ...remoteFeatures ?? {} };
}
function useAppKitEvents() {
  if (!modal) {
    throw new Error('Please call "createAppKit" before using "useAppKitEvents" hook');
  }
  const [event, setEvents] = (0, import_react2.useState)(modal.getEvent());
  (0, import_react2.useEffect)(() => {
    const unsubscribe = modal == null ? void 0 : modal.subscribeEvents((newEvent) => {
      setEvents({ ...newEvent });
    });
    return () => {
      unsubscribe == null ? void 0 : unsubscribe();
    };
  }, []);
  return event;
}

// node_modules/@reown/appkit/dist/esm/src/utils/BalanceUtil.js
async function _internalFetchBalance(appKit) {
  if (!appKit) {
    throw new Error("AppKit not initialized when  fetchBalance was called.");
  }
  return await updateBalance(appKit);
}
async function updateBalance(appKit) {
  var _a;
  const address = appKit.getAddress();
  const chainNamespace = appKit.getActiveChainNamespace();
  const chainId = (_a = appKit.getCaipNetwork()) == null ? void 0 : _a.id;
  if (!address || !chainNamespace || !chainId) {
    return {
      data: void 0,
      error: "Not able to retrieve balance",
      isSuccess: false,
      isError: true
    };
  }
  const balance = await appKit.updateNativeBalance(address, chainId, chainNamespace);
  return {
    data: balance,
    error: balance ? null : "No balance found",
    isSuccess: Boolean(balance),
    isError: !balance
  };
}

// node_modules/@reown/appkit/dist/esm/src/library/react/components.js
var import_react3 = __toESM(require_react(), 1);

// node_modules/@lit/react/development/create-component.js
var NODE_MODE = false;
var DEV_MODE = true;
var reservedReactProperties = /* @__PURE__ */ new Set([
  "children",
  "localName",
  "ref",
  "style",
  "className"
]);
var listenedEvents = /* @__PURE__ */ new WeakMap();
var addOrUpdateEventListener = (node, event, listener) => {
  let events = listenedEvents.get(node);
  if (events === void 0) {
    listenedEvents.set(node, events = /* @__PURE__ */ new Map());
  }
  let handler = events.get(event);
  if (listener !== void 0) {
    if (handler === void 0) {
      events.set(event, handler = { handleEvent: listener });
      node.addEventListener(event, handler);
    } else {
      handler.handleEvent = listener;
    }
  } else if (handler !== void 0) {
    events.delete(event);
    node.removeEventListener(event, handler);
  }
};
var setProperty = (node, name, value, old, events) => {
  const event = events == null ? void 0 : events[name];
  if (event !== void 0) {
    if (value !== old) {
      addOrUpdateEventListener(node, event, value);
    }
    return;
  }
  node[name] = value;
  if ((value === void 0 || value === null) && name in HTMLElement.prototype) {
    node.removeAttribute(name);
  }
};
var createComponent = ({ react: React2, tagName, elementClass, events, displayName }) => {
  const eventProps = new Set(Object.keys(events ?? {}));
  if (DEV_MODE && !NODE_MODE) {
    for (const p of reservedReactProperties) {
      if (p in elementClass.prototype && !(p in HTMLElement.prototype)) {
        console.warn(`${tagName} contains property ${p} which is a React reserved property. It will be used by React and not set on the element.`);
      }
    }
  }
  const ReactComponent = React2.forwardRef((props, ref) => {
    const prevElemPropsRef = React2.useRef(/* @__PURE__ */ new Map());
    const elementRef = React2.useRef(null);
    const reactProps = {};
    const elementProps = {};
    for (const [k, v] of Object.entries(props)) {
      if (reservedReactProperties.has(k)) {
        reactProps[k === "className" ? "class" : k] = v;
        continue;
      }
      if (eventProps.has(k) || k in elementClass.prototype) {
        elementProps[k] = v;
        continue;
      }
      reactProps[k] = v;
    }
    if (!NODE_MODE) {
      React2.useLayoutEffect(() => {
        if (elementRef.current === null) {
          return;
        }
        const newElemProps = /* @__PURE__ */ new Map();
        for (const key in elementProps) {
          setProperty(elementRef.current, key, props[key], prevElemPropsRef.current.get(key), events);
          prevElemPropsRef.current.delete(key);
          newElemProps.set(key, props[key]);
        }
        for (const [key, value] of prevElemPropsRef.current) {
          setProperty(elementRef.current, key, void 0, value, events);
        }
        prevElemPropsRef.current = newElemProps;
      });
      React2.useLayoutEffect(() => {
        var _a;
        (_a = elementRef.current) == null ? void 0 : _a.removeAttribute("defer-hydration");
      }, []);
    }
    if (NODE_MODE) {
      if ((React2.createElement.name === "litPatchedCreateElement" || globalThis.litSsrReactEnabled) && Object.keys(elementProps).length) {
        reactProps["_$litProps$"] = elementProps;
      }
    } else {
      reactProps["suppressHydrationWarning"] = true;
    }
    return React2.createElement(tagName, {
      ...reactProps,
      ref: React2.useCallback((node) => {
        elementRef.current = node;
        if (typeof ref === "function") {
          ref(node);
        } else if (ref !== null) {
          ref.current = node;
        }
      }, [ref])
    });
  });
  ReactComponent.displayName = displayName ?? elementClass.name;
  return ReactComponent;
};

// node_modules/@reown/appkit/dist/esm/src/library/react/components.js
var AppKitButton2 = createComponent({
  tagName: "appkit-button",
  elementClass: AppKitButton,
  react: import_react3.default
});
var AppKitNetworkButton2 = createComponent({
  tagName: "appkit-network-button",
  elementClass: AppKitNetworkButton,
  react: import_react3.default
});
var AppKitConnectButton2 = createComponent({
  tagName: "appkit-connect-button",
  elementClass: AppKitConnectButton,
  react: import_react3.default
});
var AppKitAccountButton2 = createComponent({
  tagName: "appkit-account-button",
  elementClass: AppKitAccountButton,
  react: import_react3.default
});

// node_modules/@reown/appkit/dist/esm/src/library/react/providers.js
var import_react5 = __toESM(require_react(), 1);
var appkit = null;
function memoizeCreateAppKit(config) {
  if (!appkit) {
    appkit = createAppKit(config);
  }
  return appkit;
}
function AppKitProvider({ children, ...props }) {
  memoizeCreateAppKit(props);
  return children;
}

// node_modules/@reown/appkit/dist/esm/exports/react.js
var modal2 = void 0;
function createAppKit(options) {
  if (!modal2) {
    modal2 = new AppKit({
      ...options,
      sdkVersion: CoreHelperUtil.generateSdkVersion(options.adapters ?? [], "react", PACKAGE_VERSION)
    });
    getAppKit(modal2);
  }
  return modal2;
}
function useAppKitNetwork() {
  const { caipNetwork, caipNetworkId, chainId } = useAppKitNetworkCore();
  async function switchNetwork(network) {
    await (modal2 == null ? void 0 : modal2.switchNetwork(network));
  }
  return {
    caipNetwork,
    caipNetworkId,
    chainId,
    switchNetwork
  };
}
function useAppKitBalance() {
  async function fetchBalance() {
    return await _internalFetchBalance(modal2);
  }
  return {
    fetchBalance
  };
}
export {
  AppKit,
  AppKitAccountButton2 as AppKitAccountButton,
  AppKitButton2 as AppKitButton,
  AppKitConnectButton2 as AppKitConnectButton,
  AppKitNetworkButton2 as AppKitNetworkButton,
  AppKitProvider,
  CoreHelperUtil,
  DEFAULT_METHODS,
  WcConstantsUtil,
  WcHelpersUtil,
  createAppKit,
  getAppKit,
  modal2 as modal,
  useAppKit,
  useAppKitAccount,
  useAppKitBalance,
  useAppKitConnection,
  useAppKitConnections,
  useAppKitEvents,
  useAppKitNetwork,
  useAppKitNetworkCore,
  useAppKitProvider,
  useAppKitState,
  useAppKitTheme,
  useDisconnect,
  useWalletInfo
};
/*! Bundled license information:

@lit/react/development/create-component.js:
  (**
   * @license
   * Copyright 2018 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)

@lit/react/development/index.js:
  (**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   *)
*/
//# sourceMappingURL=@reown_appkit_react.js.map
